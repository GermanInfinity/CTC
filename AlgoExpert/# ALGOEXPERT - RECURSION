# ALGOEXPERT - RECURSION
# nth fib
# if n == 1: ret 0, n == 2: ret 1
# return fib(n - 1) + fib (n - 2)
# memoise={1:0, 2:1}
# if n in memo, return memo[n]
# else: memo[n] = func(n-1, memo) + func(n-2, memo), return memo[n]

# product sum- get prudct sum from nested arrays
# loop through array, if type(ele) is list; call func again on ele and num + 1 for
depth
# else, ans += ele
# return ans * num
# PERMUTATIONS 
# return permutation of string any order


# BINARY SEARCH 
# Iterative: while left <= right
# if middle, else left = mid + 1 or right = mid - 1
# recursively pass in left and right, do not alter array by slicing
# if left > right return -1

# Search in sorted 2d array 
# while row less than len(matrix and col >= 0
# if matrix[row][col] < target: row += 1
# if matrix[row][col] > target: col -= 1
# else [row, col]


# Three number sort 
# sort array in supplied giving order
# swap elements in first position and third position of order
# increment their own counters
# firstid = 0; for i in array; if array[i] == firstValue: 
# array[firstid], array[idx] = array[idx], array[firstid]
# firstid
# do this for thirdidx = len(array) - 1; but for loop is reversed
# for i in raneg(len(array) -1, -1, -1)